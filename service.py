from geo_zones import check_restricted
from safe_zone_utils import get_user_safe_zones, get_location_info, dwell_time_penalty
from supabase import create_client
import os
import math

# ---------------- Supabase setup ----------------
SUPABASE_URL = os.environ.get("SUPABASE_URL", "https://sggckjpnftehvvqwanei.supabase.co")
SUPABASE_KEY = os.environ.get(
    "SUPABASE_KEY",
    "<YOUR_SUPABASE_KEY>"
)
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)


def insert_alert(tourist_id: str, alert_type: str, message: str, safety_score: int, location_id=None, status=1, sent=1):
    """
    Insert an alert into the database.
    status: 1 = completely dealt with, 2 = currently being dealt with
    sent: 1 = generated by model, 2 = submitted by user
    """
    data = {
        "tourist_id": tourist_id,
        "location_id": location_id,
        "alert_type": alert_type,
        "message": message,
        "safety_score": safety_score,
        "status": status,
        "sent": sent
    }
    supabase.table("alerts").insert(data).execute()


def evaluate_tourist(data):
    # Extract data
    age = data.get("age", 30)
    disabilities = data.get("disabilities", "none").lower()
    health_conditions = data.get("health_conditions", "none").lower()
    speed = data.get("speed", 0)
    dwell = data.get("dwell_time", 0)
    
    # Base safety score
    safety_score = 100
    alerts = []

    # Example: simple anomaly checks
    if speed > 50:
        alerts.append("Unusually high speed")
        safety_score -= 10

    if dwell > 180:
        alerts.append("Prolonged dwell")
        safety_score -= 5

    # Vulnerable people: give preference
    if age >= 60:
        safety_score += 5
    if disabilities != "none":
        safety_score += 10
    if health_conditions != "none":
        safety_score += 10

    # Cap the score between 0-100
    safety_score = max(0, min(100, safety_score))

    # Determine risk
    risk = "Low"
    if safety_score < 50:
        risk = "High"
    elif safety_score < 80:
        risk = "Medium"

    return {
        "speed": speed,
        "dwell": dwell,
        "alerts": alerts,
        "safety_score": safety_score,
        "risk": risk
    }



def haversine_distance(lat1, lon1, lat2, lon2):
    """Returns distance in km between two coordinates."""
    R = 6371
    phi1 = math.radians(lat1)
    phi2 = math.radians(lat2)
    delta_phi = math.radians(lat2 - lat1)
    delta_lambda = math.radians(lon2 - lon1)
    a = math.sin(delta_phi / 2) ** 2 + \
        math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c
