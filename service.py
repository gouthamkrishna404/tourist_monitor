from geo_zones import check_restricted
from safe_zone_utils import get_user_safe_zones, get_location_info, dwell_time_penalty
from supabase import create_client
import os
import math

# ---------------- Supabase setup ----------------
SUPABASE_URL = os.environ.get("SUPABASE_URL", "https://sggckjpnftehvvqwanei.supabase.co")
SUPABASE_KEY = os.environ.get(
    "SUPABASE_KEY",
    "<YOUR_SUPABASE_KEY>"
)
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)


def insert_alert(tourist_id: str, alert_type: str, message: str, safety_score: int, location_id=None, status=1, sent=1):
    """
    Insert an alert into the database.
    status: 1 = completely dealt with, 2 = currently being dealt with
    sent: 1 = generated by model, 2 = submitted by user
    """
    data = {
        "tourist_id": tourist_id,
        "location_id": location_id,
        "alert_type": alert_type,
        "message": message,
        "safety_score": safety_score,
        "status": status,
        "sent": sent
    }
    supabase.table("alerts").insert(data).execute()


def evaluate_tourist(data: dict):
    """
    Main logic to evaluate tourist risk.
    Returns structured dict with risk, alerts, and safety score.
    """
    tourist_id = data.get("tourist_id")
    lat = data.get("latitude")
    lon = data.get("longitude")
    dwell_time = data.get("dwell_time", 0)
    location_id = data.get("location_id")  # optional, if available

    alerts = []

    # 1️⃣ Check restricted zones
    restricted_alerts = check_restricted(lat, lon)
    alerts.extend(restricted_alerts)

    # 2️⃣ Check dwell time against safe zones
    safe_zones = get_user_safe_zones(tourist_id)
    for zone_lat, zone_lon, zone_type in safe_zones:
        distance = haversine_distance(lat, lon, zone_lat, zone_lon)
        if distance <= 0.05:  # within 50 meters
            min_time, max_time = get_location_info(zone_type)
            penalty = dwell_time_penalty(dwell_time, min_time, max_time)
            if penalty:
                alerts.append(f"⚠️ Dwell time anomaly at {zone_type} (spent {dwell_time} mins)")

    # 3️⃣ Compute safety score
    safety_score = max(0, 100 - len(alerts) * 25)  # each alert reduces score
    risk_level = "Low" if safety_score > 75 else "Medium" if safety_score > 50 else "High"

    # 4️⃣ Insert alerts into database (model-generated, sent=1)
    for alert_msg in alerts:
        alert_type = "Restricted Zone" if "restricted" in alert_msg.lower() else "Dwell Time Anomaly"
        insert_alert(
            tourist_id,
            alert_type,
            alert_msg,
            safety_score,
            location_id,
            status=1,   # default: completely dealt with
            sent=1      # model-generated
        )

    return {
        "tourist_id": tourist_id,
        "latitude": lat,
        "longitude": lon,
        "alerts": alerts,
        "safety_score": safety_score,
        "risk_level": risk_level
    }


def haversine_distance(lat1, lon1, lat2, lon2):
    """Returns distance in km between two coordinates."""
    R = 6371
    phi1 = math.radians(lat1)
    phi2 = math.radians(lat2)
    delta_phi = math.radians(lat2 - lat1)
    delta_lambda = math.radians(lon2 - lon1)
    a = math.sin(delta_phi / 2) ** 2 + \
        math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c
